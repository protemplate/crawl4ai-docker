name: Build and Push Crawl4AI Docker Image

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  
  # Trigger on pull request
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  
  # Weekly scheduled build to get latest Crawl4AI updates
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      install_type:
        description: 'Installation type'
        required: false
        default: 'all'
        type: choice
        options:
          - default
          - all
          - torch
          - transformer
      force_rebuild:
        description: 'Force rebuild without cache'
        type: boolean
        required: false
        default: false
      push_to_registry:
        description: 'Push to Docker Hub'
        type: boolean
        required: false
        default: true

env:
  REGISTRY: docker.io
  # Note: DOCKER_USERNAME should be set as a repository secret
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/crawl4ai
  # Build only amd64 by default to save resources
  PLATFORMS: linux/amd64
  CACHE_REGISTRY: ${{ secrets.DOCKER_USERNAME }}/crawl4ai-cache

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      crawl4ai_sha: ${{ steps.check.outputs.crawl4ai_sha }}
      crawl4ai_version: ${{ steps.check.outputs.crawl4ai_version }}
      crawl4ai_release: ${{ steps.check.outputs.crawl4ai_release }}
      build_date: ${{ steps.check.outputs.build_date }}
      has_changes: ${{ steps.check.outputs.has_changes }}
      version_exists: ${{ steps.check.outputs.version_exists }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for Crawl4AI updates
      id: check
      run: |
        # Get the latest release tag from GitHub
        CRAWL4AI_RELEASE=$(curl -s https://api.github.com/repos/unclecode/crawl4ai/releases/latest | jq -r '.tag_name')
        if [ -z "$CRAWL4AI_RELEASE" ] || [ "$CRAWL4AI_RELEASE" = "null" ]; then
          echo "Warning: Could not fetch latest release, using default"
          CRAWL4AI_RELEASE="v0.6.3"
        fi
        echo "Found latest Crawl4AI release: ${CRAWL4AI_RELEASE}"
        
        # Remove 'v' prefix if present for version number
        CRAWL4AI_VERSION="${CRAWL4AI_RELEASE#v}"
        echo "crawl4ai_version=${CRAWL4AI_VERSION}" >> $GITHUB_OUTPUT
        echo "crawl4ai_release=${CRAWL4AI_RELEASE}" >> $GITHUB_OUTPUT
        
        # Get the commit SHA for this release
        CRAWL4AI_SHA=$(curl -s https://api.github.com/repos/unclecode/crawl4ai/git/refs/tags/${CRAWL4AI_RELEASE} | jq -r '.object.sha')
        if [ -z "$CRAWL4AI_SHA" ] || [ "$CRAWL4AI_SHA" = "null" ]; then
          # Fallback to main branch SHA
          CRAWL4AI_SHA=$(curl -s https://api.github.com/repos/unclecode/crawl4ai/commits/main | jq -r '.sha')
        fi
        echo "crawl4ai_sha=${CRAWL4AI_SHA}" >> $GITHUB_OUTPUT
        
        # Check if this version already exists on Docker Hub
        VERSION_EXISTS="false"
        if [ "${{ github.event_name }}" != "pull_request" ] && [ "${{ secrets.DOCKER_USERNAME }}" != "" ]; then
          # Check if the version tag already exists
          INSTALL_TYPE="${{ github.event.inputs.install_type || 'default' }}"
          TAG_SUFFIX=""
          if [ "$INSTALL_TYPE" != "default" ]; then
            TAG_SUFFIX="-$INSTALL_TYPE"
          fi
          EXISTING_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/crawl4ai/tags/v${CRAWL4AI_VERSION}${TAG_SUFFIX}" | jq -r '.name' 2>/dev/null || echo "")
          if [ "$EXISTING_TAG" != "" ] && [ "$EXISTING_TAG" != "null" ]; then
            VERSION_EXISTS="true"
            echo "Version v${CRAWL4AI_VERSION}${TAG_SUFFIX} already exists on Docker Hub"
          fi
        fi
        
        # Set build date
        BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        
        # Check if we should build
        SHOULD_BUILD="false"
        
        # Always build for manual trigger with force rebuild
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
          SHOULD_BUILD="true"
          echo "Building due to force rebuild flag"
        # For manual trigger without force rebuild, check if version exists
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ "$VERSION_EXISTS" == "false" ]; then
            SHOULD_BUILD="true"
            echo "Building due to manual trigger - version doesn't exist"
          else
            echo "Version already exists, skipping build (use force_rebuild to override)"
          fi
        # Always build for push or PR
        elif [ "${{ github.event_name }}" == "push" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
          SHOULD_BUILD="true"
          echo "Building due to push or pull request"
        # For scheduled builds, check if there's a new version
        elif [ "${{ github.event_name }}" == "schedule" ]; then
          # Check if version already exists
          if [ "$VERSION_EXISTS" == "false" ]; then
            SHOULD_BUILD="true"
            echo "New Crawl4AI version detected: v${CRAWL4AI_VERSION}"
          else
            echo "Crawl4AI version v${CRAWL4AI_VERSION} already built, skipping"
          fi
        fi
        
        echo "should_build=${SHOULD_BUILD}" >> $GITHUB_OUTPUT
        echo "version_exists=${VERSION_EXISTS}" >> $GITHUB_OUTPUT
        
        # Check for local changes
        if [ -n "$(git status --porcelain)" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        install_type: 
          - ${{ github.event.inputs.install_type || 'default' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Disk space before cleanup:"
        df -h
        
        # Remove unnecessary tools and files
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/share/swift
        
        # Clean apt cache
        sudo apt-get clean
        sudo apt-get autoremove -y
        
        # Remove docker images
        docker image prune -af
        
        echo "Disk space after cleanup:"
        df -h

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:master
        buildkitd-flags: --debug

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' && github.event.inputs.push_to_registry != 'false'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        flavor: |
          latest=false
          suffix=${{ matrix.install_type != 'default' && format('-{0}', matrix.install_type) || '' }}
        tags: |
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Version tag with v prefix
          type=raw,value=v${{ needs.check-updates.outputs.crawl4ai_version }}
          # PR tag
          type=ref,event=pr
        labels: |
          org.opencontainers.image.title=Custom Crawl4AI
          org.opencontainers.image.description=Custom build of Crawl4AI with latest updates
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.created=${{ needs.check-updates.outputs.build_date }}
          org.opencontainers.image.revision=${{ github.sha }}
          crawl4ai.version=${{ needs.check-updates.outputs.crawl4ai_version }}
          crawl4ai.release=${{ needs.check-updates.outputs.crawl4ai_release }}
          crawl4ai.sha=${{ needs.check-updates.outputs.crawl4ai_sha }}
          crawl4ai.install_type=${{ matrix.install_type }}

    - name: Log build information
      run: |
        echo "Building from Crawl4AI release: ${{ needs.check-updates.outputs.crawl4ai_release }}"
        echo "Docker image version: v${{ needs.check-updates.outputs.crawl4ai_version }}"
        echo "Git SHA: ${{ needs.check-updates.outputs.crawl4ai_sha }}"

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ env.PLATFORMS }}
        push: ${{ github.event_name != 'pull_request' && github.event.inputs.push_to_registry != 'false' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          INSTALL_TYPE=${{ matrix.install_type }}
          GITHUB_BRANCH=${{ needs.check-updates.outputs.crawl4ai_release }}
        cache-from: |
          type=gha
          type=registry,ref=${{ env.CACHE_REGISTRY }}:buildcache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.CACHE_REGISTRY }}:buildcache,mode=max
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}
        provenance: false
        sbom: false

  test-image:
    needs: [check-updates, build-and-push]
    if: needs.check-updates.outputs.should_build == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        install_type: 
          - ${{ github.event.inputs.install_type || 'default' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker image
      run: |
        # Pull the image
        docker pull ${{ env.IMAGE_NAME }}:latest${{ matrix.install_type != 'default' && format('-{0}', matrix.install_type) || '' }}
        
        # Run basic tests
        docker run --rm ${{ env.IMAGE_NAME }}:latest${{ matrix.install_type != 'default' && format('-{0}', matrix.install_type) || '' }} python -c "import crawl4ai; print('Crawl4AI imported successfully')"
        
        # Test server startup
        docker run -d --name test-crawl4ai -p 11235:11235 ${{ env.IMAGE_NAME }}:latest${{ matrix.install_type != 'default' && format('-{0}', matrix.install_type) || '' }}
        
        # Get container logs for debugging
        sleep 5
        echo "Container logs:"
        docker logs test-crawl4ai
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..120}; do
          if curl -f -s http://localhost:11235/health; then
            echo "Server is ready!"
            break
          fi
          echo "Attempt $i/120..."
          if [ $((i % 10)) -eq 0 ]; then
            echo "Recent container logs:"
            docker logs --tail 20 test-crawl4ai
          fi
          sleep 2
        done
        
        # Test API endpoint
        curl -f -s http://localhost:11235/health || exit 1
        
        # Cleanup
        docker stop test-crawl4ai
        docker rm test-crawl4ai

  notify:
    needs: [check-updates, build-and-push, test-image]
    if: always() && needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Create summary
      run: |
        if [ "${{ needs.test-image.result }}" == "success" ]; then
          echo "## ✅ Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Crawl4AI Version:** ${{ needs.check-updates.outputs.crawl4ai_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Crawl4AI SHA:** ${{ needs.check-updates.outputs.crawl4ai_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Date:** ${{ needs.check-updates.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Available Images:" >> $GITHUB_STEP_SUMMARY
          INSTALL_TYPE="${{ github.event.inputs.install_type || 'default' }}"
          SUFFIX=""
          if [ "$INSTALL_TYPE" != "default" ]; then
            SUFFIX="-$INSTALL_TYPE"
          fi
          echo "- \`${{ env.IMAGE_NAME }}:latest$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.IMAGE_NAME }}:v${{ needs.check-updates.outputs.crawl4ai_version }}$SUFFIX\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Build Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify via webhook (optional)
      if: always()
      run: |
        # Send notification to webhook if configured
        if [ -n "${{ secrets.WEBHOOK_URL }}" ]; then
          curl -X POST ${{ secrets.WEBHOOK_URL }} \
            -H "Content-Type: application/json" \
            -d '{
              "event": "crawl4ai-build",
              "status": "${{ needs.test-image.result }}",
              "version": "${{ needs.check-updates.outputs.crawl4ai_version }}",
              "sha": "${{ needs.check-updates.outputs.crawl4ai_sha }}",
              "repository": "${{ github.repository }}",
              "run_id": "${{ github.run_id }}"
            }'
        else
          echo "WEBHOOK_URL not configured, skipping notification"
        fi